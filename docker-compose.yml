services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - kafka
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 60s
 
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: "rabbitmq"
    ports:
      - "15672:15672"  
      - "5672:5672"
    networks:
      - kafka
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  postgres_portfolios:
    image: postgres:latest
    container_name: postgres_portfolios
    environment:
      POSTGRES_USER: portfoliosuser
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: portfoliosdb
    ports:
      - "5433:5432"
    networks:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfoliosuser -d portfoliosdb"]
      interval: 10s
      retries: 5
      start_period: 10s
    volumes:
      - ./init-portfolios-db.sql:/docker-entrypoint-initdb.d/init-portfolios-db.sql

  postgres_orders:
    image: postgres:latest
    container_name: postgres_orders
    environment:
      POSTGRES_USER: ordersuser
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: ordersdb
    ports:
      - "5434:5432"
    networks:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ordersuser -d ordersdb"]
      interval: 10s
      retries: 5
      start_period: 10s
    volumes:
      - ./init-orders-db.sql:/docker-entrypoint-initdb.d/init-orders-db.sql

  priceservice:
    build:
      context: .  
      dockerfile: ./PriceService/Dockerfile
    ports:
      - "5001:8080"
    networks:
      - kafka
    depends_on:
      kafka:
        condition: service_healthy

  orderservice:
    build:
      context: .
      dockerfile: ./OrderService/Dockerfile
    ports:
      - "5002:8080"
    networks:
      - kafka
    depends_on:
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_healthy
      priceservice:
        condition: service_healthy 

  portfolioservice:
    build:
      context: .
      dockerfile: ./PortfolioService/Dockerfile
    ports:
      - "5003:8080"
    networks:
      - kafka
    depends_on:
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_healthy
      priceservice:
        condition: service_healthy  

  apigateway:
    build:
      context: .
      dockerfile: ./ApiGateway/Dockerfile
    ports:
      - "5000:8080"
    networks:
      - kafka
    depends_on:
      - priceservice
      - orderservice
      - portfolioservice
    
networks:
  kafka: